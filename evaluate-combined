#!/usr/bin/env python
import sys
import argparse # optparse is deprecated
import numpy as np
from VectorMap import VectorMap
import string
from itertools import islice # slicing for iterators
#import progressbar
from time import sleep
 
 # unneeded, replace with cosign similarity calculations
def word_matches(h, ref):
    return sum(1 for w in h if w in ref)

def euclidean_dist(sent_vec, ref_vec):
    return (sum((x[0] - x[1]) ** 2 for x in zip(sent_vec, ref_vec))) ** 0.5

def cosine_sim(sent_vec, ref_vec):
    dot_product = np.dot(sent_vec, ref_vec)
    mag_sent = np.linalg.norm(sent_vec)
    #print "Sentence Vector: " + str(mag_sent)
    mag_ref = np.linalg.norm(ref_vec)
    #print "Reference Vector: " + str(mag_ref)
    similarity = dot_product / (mag_sent * mag_ref)
    #print "Similarity: " + str(similarity)
    return similarity

def prerec(h, e, vm):
    score = 0.0
    earr = e.split()
    harr = h.split()

    # unigram
    ewords = set(earr)
    for hword in harr:
        if hword in earr:
            score += 1

    # 2gram
    e2words = set()
    for i in range(0, len(earr) - 1):
        e2words.add(" ".join((earr[i], earr[i + 1])))
    for i in range(0, len(harr) - 1):
        if " ".join((harr[i], harr[i + 1])) in e2words:
            score += 1

    # 3gram
    e3words = set()
    for i in range(0, len(earr) - 2):
        e3words.add(" ".join((earr[i], earr[i + 1], earr[i + 2])))
    for i in range(0, len(harr) - 2):
        if " ".join((harr[i], harr[i + 1], harr[i + 2])) in e3words:
            score += 1

    # 4gram
    e4words = set()
    for i in range(0, len(earr) - 3):
        e4words.add(" ".join((earr[i], earr[i + 1], earr[i + 2], earr[i + 3])))
    for i in range(0, len(harr) - 3):
        if " ".join((harr[i], harr[i + 1], harr[i + 2], harr[i + 3])) in e4words:
            score += 1

    if len(e.split()) == 0:
        return 1.0
    return score / (len(harr) * 4 - 6)

def preprocess(line):
    line = line.lower()
    exclude = set(string.punctuation)
    line = ''.join(ch if ch not in exclude else ' ' for ch in line)
    return line
 
def main():
    parser = argparse.ArgumentParser(description='Evaluate translation hypotheses.')
    parser.add_argument('-i', '--input', default='data/hyp1-hyp2-ref',
            help='input file (default data/hyp1-hyp2-ref)')
    parser.add_argument('-n', '--num_sentences', default=None, type=int,
            help='Number of hypothesis pairs to evaluate')
    #bar = progressbar.ProgressBar(maxval=20, widgets=[progressbar.Bar('=', '[', ']'), ' ', progressbar.Percentage()])
    # note that if x == [1, 2, 3], then x[:None] == x[:] == x (copy); no need for sys.maxint
    opts = parser.parse_args()
    vm = VectorMap()
    vm.load_from_file("wiki-vectors.txt")
    # we create a generator and avoid loading all sentences into a list
    def sentences():
        with open(opts.input) as f:
            for pair in f:
                yield [preprocess(sentence) for sentence in pair.split(' ||| ')]
# note: the -n option does not work in the original code
    alpha = 0.82
    for h1, h2, ref in islice(sentences(), opts.num_sentences):
        h1_precision = prerec(h1, ref, vm)
        h2_precision = prerec(h2, ref, vm)
        h1_recall = prerec(ref, h1, vm)
        h2_recall = prerec(ref, h2, vm)

        if h1_recall == 0 and h1_precision == 0:
            h1_l = 0
        else:
            h1_l = (h1_precision * h1_recall) / ((1.0 - alpha) * h1_recall + alpha * h1_precision)

        if h2_recall == 0 and h2_precision == 0:
            h1_2 = 0
        else:
            h2_l = (h2_precision * h2_recall) / ((1.0 - alpha) * h2_recall + alpha * h2_precision)

        v_ref = vm.sentence_to_vector(ref)
        v_h1 = vm.sentence_to_vector(h1)
        v_h2 = vm.sentence_to_vector(h2)
        h1_match = cosine_sim(v_h1, v_ref)
        h2_match = cosine_sim(v_h2, v_ref)

        h1_match *= h1_l
        h2_match *= h2_l
        # 1 if sim between h1 and ref is greater than h2 and ref
        print(1 if h1_match > h2_match else # \begin{cases}
                (0 if abs(h1_match - h2_match) < 0.001
                    else -1)) # \end{cases}
        #bar.update(i+1)
        #i += 1
        #sleep(0.1)
    #bar.finish()
 
# convention to allow import of this file as a module
if __name__ == '__main__':
    main()
